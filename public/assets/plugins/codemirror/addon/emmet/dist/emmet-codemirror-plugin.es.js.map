{"version":3,"file":"emmet-codemirror-plugin.es.js","sources":["../lib/config.js","../lib/stream-reader.js","../lib/utils.js","../lib/extract-abbreviation.js","../lib/snippet.js","../lib/abbreviation.js","../lib/commands/expand-abbreviation.js","../lib/commands/formatted-line-break.js","../lib/commands/wrap-with-abbreviation.js","../lib/abbreviation-marker.js","../lib/autocomplete.js","../lib/model/syntax-model.js","../lib/model/html.js","../lib/model/index.js","../lib/match-tag.js","../lib/rename-tag.js","../extension.js"],"sourcesContent":["'use strict';\n\nimport resolveConfig from '@emmetio/config';\n\nconst editorField = (index, placeholder = '') => `\\${${index}${placeholder ? ':' + placeholder : ''}}`;\n\n/**\n * Returns resolved Emmet config for `pos` location of given editor\n * @param  {CodeMirror.Editor} editor\n * @param  {CodeMirror.Position} [pos]  Point in editor where syntax should be detected.\n * Uses `editor.getCursor()` if not given\n * @param  {Object} [options] Additional options to override before config resolve\n * @return {Object}\n */\nexport default function createConfig(editor, pos, options) {\n\tpos = pos || editor.getCursor();\n\tconst syntax = getSyntax(editor, pos);\n\n\t/** @type {EmmetConfig} */\n\tconst config = resolveConfig(Object.assign(\n\t\t{ field: editorField },\n\t\teditor.getOption('emmet'),\n\t\toptions\n\t), { syntax });\n\n\tconst mode = editor.getModeAt(pos);\n\tif (syntax === 'jsx') {\n\t\tconfig.profile = Object.assign({ selfClosingStyle: 'xml' }, config.profile);\n\t\tconfig.options = Object.assign({ jsx: true }, config.options);\n\t} else if (mode.name === 'xml') {\n\t\tconfig.profile = Object.assign({ selfClosingStyle: mode.configuration }, config.profile);\n\t}\n\n\treturn config;\n}\n\n/**\n * Detect Emmet syntax from given editor’s position.\n * @param {CodeMirror.Editor} editor\n * @param {CodeMirror.Position} [pos]\n * @return {String} Returns `null` if Emmet syntax can’t be detected\n */\nexport function getSyntax(editor, pos) {\n\tconst rootMode = editor.getMode();\n\tif (rootMode.name === 'jsx' || rootMode.name === 'javascript') {\n\t\treturn rootMode.name;\n\t}\n\n\tconst mode = editor.getModeAt(pos);\n\treturn mode.name === 'xml' ? 'html' : mode.name;\n}\n","'use strict';\n\nimport StreamReader from '@emmetio/stream-reader';\n\nconst LINE_END = 10; // \\n\n\n/**\n * A stream reader for CodeMirror editor\n */\nexport default class CodeMirrorStreamReader extends StreamReader {\n\t/**\n\t * @param  {CodeMirror.Editor} editor\n\t * @param  {CodeMirror.Position} [pos]\n\t * @param  {CodeMirror.Range} [limit]\n\t */\n\tconstructor(editor, pos, limit) {\n\t\tsuper();\n\t\tconst CodeMirror = editor.constructor;\n\t\tthis.editor = editor;\n\t\tthis.start = this.pos = pos || CodeMirror.Pos(0, 0);\n\n\t\tconst lastLine = editor.lastLine();\n\t\tthis._eof = limit ? limit.to   : CodeMirror.Pos(lastLine, this._lineLength(lastLine));\n\t\tthis._sof = limit ? limit.from : CodeMirror.Pos(0, 0);\n\t}\n\n\t/**\n\t * Returns true only if the stream is at the beginning of the file.\n\t * @returns {Boolean}\n\t */\n\tsof() {\n\t\treturn comparePos(this.pos, this._sof) <= 0;\n\t}\n\n\t/**\n\t * Returns true only if the stream is at the end of the file.\n\t * @returns {Boolean}\n\t */\n\teof() {\n\t\treturn comparePos(this.pos, this._eof) >= 0;\n\t}\n\n\t/**\n\t * Creates a new stream instance which is limited to given `start` and `end`\n\t * points for underlying buffer\n\t * @param  {CodeMirror.Pos} start\n\t * @param  {CodeMirror.Pos} end\n\t * @return {CodeMirrorStreamReader}\n\t */\n\tlimit(from, to) {\n\t\treturn new this.constructor(this.editor, from, { from, to });\n\t}\n\n\t/**\n\t * Returns the next character code in the stream without advancing it.\n\t * Will return NaN at the end of the file.\n\t * @returns {Number}\n\t */\n\tpeek() {\n\t\tconst { line, ch } = this.pos;\n\t\tconst lineStr = this.editor.getLine(line);\n\t\treturn ch < lineStr.length ? lineStr.charCodeAt(ch) : LINE_END;\n\t}\n\n\t/**\n\t * Returns the next character in the stream and advances it.\n\t * Also returns NaN when no more characters are available.\n\t * @returns {Number}\n\t */\n\tnext() {\n\t\tif (!this.eof()) {\n\t\t\tconst code = this.peek();\n\t\t\tthis.pos = Object.assign({}, this.pos, { ch: this.pos.ch + 1 });\n\n\t\t\tif (this.pos.ch >= this._lineLength(this.pos.line)) {\n\t\t\t\tthis.pos.line++;\n\t\t\t\tthis.pos.ch = 0;\n\t\t\t}\n\n\t\t\tif (this.eof()) {\n\t\t\t\t// handle edge case where position can move on next line\n\t\t\t\t// after EOF\n\t\t\t\tthis.pos = Object.assign({}, this._eof);\n\t\t\t}\n\n\t\t\treturn code;\n\t\t}\n\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * Backs up the stream n characters. Backing it up further than the\n\t * start of the current token will cause things to break, so be careful.\n\t * @param {Number} n\n\t */\n\tbackUp(n) {\n\t\tconst CodeMirror = this.editor.constructor;\n\n\t\tlet { line, ch } = this.pos;\n\t\tch -= (n || 1);\n\n\t\twhile (line >= 0 && ch < 0) {\n\t\t\tline--;\n\t\t\tch += this._lineLength(line);\n\t\t}\n\n\t\tthis.pos = line < 0 || ch < 0\n\t\t\t? CodeMirror.Pos(0, 0)\n\t\t\t: CodeMirror.Pos(line, ch);\n\n\t\treturn this.peek();\n\t}\n\n\t/**\n\t * Get the string between the start of the current token and the\n\t * current stream position.\n\t * @returns {String}\n\t */\n\tcurrent() {\n\t\treturn this.substring(this.start, this.pos);\n\t}\n\n\t/**\n\t * Returns contents for given range\n\t * @param  {Point} from\n\t * @param  {Point} to\n\t * @return {String}\n\t */\n\tsubstring(from, to) {\n\t\treturn this.editor.getRange(from, to);\n\t}\n\n\t/**\n\t * Creates error object with current stream state\n\t * @param {String} message\n\t * @return {Error}\n\t */\n\terror(message) {\n\t\tconst err = new Error(`${message} at line ${this.pos.line}, column ${this.pos.ch}`);\n\t\terr.originalMessage = message;\n\t\terr.pos = this.pos;\n\t\terr.string = this.string;\n\t\treturn err;\n\t}\n\n\t/**\n\t * Returns length of given line, including line ending\n\t * @param  {Number} line\n\t * @return {Number}\n\t */\n\t_lineLength(line) {\n\t\tconst isLast = line === this.editor.lastLine();\n\t\treturn this.editor.getLine(line).length + (isLast ? 0 : 1);\n\t}\n}\n\nfunction comparePos(a, b) {\n\treturn a.line - b.line || a.ch - b.ch;\n}\n","'use strict';\n\nimport parseFields from '@emmetio/field-parser';\nimport CodeMirrorStreamReader from './stream-reader';\nimport { isSpace } from '@emmetio/stream-reader-utils';\n\n/**\n * Returns token used for single indentation in given editor\n * @param  {CodeMirror.Editor} editor\n * @return {String}\n */\nexport function getIndentation(editor) {\n\tif (!editor.getOption('indentWithTabs')) {\n\t\treturn repeatString(' ', editor.getOption('indentUnit'));\n\t}\n\n\treturn '\\t';\n}\n\n/**\n * Normalizes text according to given CodeMirror instance indentation\n * preferences\n * @param  {String} text\n * @param  {CodeMirror.Editor} editor\n * @param  {String} [indentation] Applies `indentText()` with given argument, if provided\n * @return {String}\n */\nexport function normalizeText(editor, text, indentation) {\n\tlet lines = splitByLines(text);\n\tconst indent = getIndentation(editor);\n\n\tif (indent !== '\\t') {\n\t\tlines = lines.map(line => line.replace(/^\\t+/,\n\t\t\ttabs => repeatString(indent, tabs.length)));\n\t}\n\n\tif (indentation) {\n\t\tlines = lines.map((line, i) => i ? indentation + line : line);\n\t}\n\n\treturn lines.join('\\n');\n}\n\n/**\n * Indents each line, except first one, in given text\n * @param  {String} text\n * @param  {String} indentation\n * @return {String}\n */\nexport function indentText(text, indentation) {\n\treturn splitByLines(text)\n\t\t.map((line, i) => i ? indentation + line : line)\n\t\t.join('\\n');\n}\n\n/**\n * Splits given text by lines\n * @param  {String} text\n * @return {String[]} Lines of text\n */\nexport function splitByLines(text) {\n\treturn Array.isArray(text) ? text : text.split(/\\r\\n|\\r|\\n/g);\n}\n\nexport function repeatString(str, count) {\n\tlet result = '';\n\twhile (0 < count--) {\n\t\tresult += str;\n\t}\n\n\treturn result;\n}\n\n/**\n * Quick and dirty way to remove fields from given string\n * @param  {String} str\n * @return {String}\n */\nexport function removeFields(str) {\n\treturn parseFields(str).string;\n}\n\n/**\n * Check if given range contains point\n * @param  {CodeMirror.Range} range\n * @param  {CodeMirror.Position} pos\n * @param  {Boolean} [exclude] Exclude range and and start\n * @return {Boolean}\n */\nexport function containsPos(range, pos, exclude) {\n\treturn exclude\n\t\t? comparePos(pos, range.from) > 0 && comparePos(pos, range.to) < 0\n\t\t: comparePos(pos, range.from) >= 0 && comparePos(pos, range.to) <= 0;\n}\n\nexport function comparePos(a, b) {\n\treturn a.line - b.line || a.ch - b.ch;\n}\n\nexport function rangeFromNode(node) {\n\treturn {\n\t\tfrom: node.start,\n\t\tto: node.end\n\t};\n}\n\n/**\n * Narrows given `{from, to}` range to first non-whitespace characters in given \n * editor content\n * @param {CodeMirror.Editor} editor \n * @param {CodeMirror.Position} from \n * @param {CodeMirror.Position} [to] \n * @returns {Object}\n */\nexport function narrowToNonSpace(editor, from, to) {\n\tconst stream = new CodeMirrorStreamReader(editor, from);\n\n\tstream.eatWhile(isSpace);\n\tfrom = stream.pos;\n\t\n\tif (to) {\n\t\tstream.pos = to;\n\t\tstream.backUp();\n\n\t\twhile (!stream.sof() && isSpace(stream.peek())) {\n\t\t\tstream.backUp();\n\t\t}\n\n\t\tstream.next();\n\t\tto = stream.pos;\n\t} else {\n\t\tto = from;\n\t}\n\n\treturn { from, to };\n}\n\n/**\n * Returns nearest CSS property name, left to given position\n * @param {CodeMirror.Editor} editor \n * @param {CodeMirror.Position} pos \n * @returns {String}\n */\nexport function getCSSPropertyName(editor, pos) {\n\tconst line = pos.line;\n\tlet ch = pos.ch, token;\n\n\twhile (ch >= 0) {\n\t\ttoken = editor.getTokenAt({ line, ch });\n\t\tif (token.type === 'property') {\n\t\t\treturn token.string;\n\t\t}\n\n\t\tif (token.start !== ch) {\n\t\t\tch = token.start;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n/**\n * Check if given position is inside CSS property value\n * @param {CodeMirror.Editor} editor \n * @param {CodeMirror.Position} pos \n * @return {Boolean}\n */\nexport function isCSSPropertyValue(editor, pos) {\n\tconst mode = editor.getModeAt(pos);\n\tif (mode && mode.name === 'css') {\n\t\tconst token = editor.getTokenAt(pos);\n\t\tconst state = token.state && token.state.localState || token.state;\n\t\treturn state && state.context && state.context.type === 'prop';\n\t}\n\n\treturn false;\n}\n","'use strict';\n\nimport extract from '@emmetio/extract-abbreviation';\nimport createConfig from './config';\nimport { isCSSPropertyValue, getCSSPropertyName } from './utils';\n\n/**\n * Context-aware abbreviation extraction from given editor.\n * Detects syntax context in `pos` editor location and, if it allows Emmet\n * abbreviation to be extracted here, returns object with extracted abbreviation,\n * its location and config.\n * @param {CodeMirror.Editor} editor\n * @param {CodeMirror.Position} pos\n */\nexport default function extractAbbreviation(editor, pos, contextAware) {\n\tconst config = createConfig(editor, pos);\n\n\tif (contextAware && !canExtract(editor, pos, config)) {\n\t\treturn null;\n\t}\n\n\tconst extracted = extract(editor.getLine(pos.line), pos.ch, {\n\t\tlookAhead: true,\n\t\tsyntax: config.type,\n\t\tprefix: config.syntax === 'jsx' && editor.getOption('jsxBracket') ? '<' : ''\n\t});\n\n\tif (extracted) {\n\t\tconst from = {\n\t\t\tline: pos.line,\n\t\t\tch: extracted.start\n\t\t};\n\t\tconst to = {\n\t\t\tline: pos.line,\n\t\t\tch: extracted.end\n\t\t};\n\n\t\tif (config.type === 'stylesheet' && contextAware) {\n\t\t\t// In case of stylesheet syntaxes (CSS, LESS) we should narrow down\n\t\t\t// expand context to property value, if possible\n\t\t\tif (isCSSPropertyValue(editor, pos)) {\n\t\t\t\tconfig.options = Object.assign({ property: getCSSPropertyName(editor, pos) }, config.options);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tabbreviation: extracted.abbreviation,\n\t\t\trange: { from, to },\n\t\t\tconfig\n\t\t};\n\t}\n}\n\n/**\n * Check if abbreviation can be extracted from given position\n * @param {CodeMirror.Editor} editor\n * @param {CodeMirror.Position} pos\n * @param {Object} config\n * @return {Boolean}\n */\nfunction canExtract(editor, pos, config) {\n\tconst tokenType = editor.getTokenTypeAt(pos);\n\n\tif (config.type === 'stylesheet') {\n\t\treturn tokenType !== 'comment' && tokenType !== 'string';\n\t}\n\n\tif (config.syntax === 'html') {\n\t\treturn tokenType === null;\n\t}\n\n\tif (config.syntax === 'slim' || config.syntax === 'pug') {\n\t\treturn tokenType === null || tokenType === 'tag'\n\t\t\t|| (tokenType && /attribute/.test(tokenType));\n\t}\n\n\tif (config.syntax === 'haml') {\n\t\treturn tokenType === null || tokenType === 'attribute';\n\t}\n\n\tif (config.syntax === 'jsx') {\n\t\t// JSX a bit tricky, delegate it to caller\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","'use strict';\n\nimport parseFields from '@emmetio/field-parser';\nimport { normalizeText } from './utils';\n\n/**\n * Replaces `range` in `editor` with `text` snippet. A snippet is a string containing\n * tabstops/fields like `${index:placeholder}`: this function will locate such \n * fields and place cursor at first one.\n * Inserted snippet will be automatically matched with current editor indentation\n * @param {CodeMirror.Editor} editor \n * @param {CodeMirror.Range} range \n * @param {String} text\n */\nexport default function insertSnippet(editor, range, text) {\n\tconst line = editor.getLine(range.from.line);\n\tconst matchIndent = line.match(/^\\s+/);\n\tlet snippet = normalizeText(editor, text, matchIndent && matchIndent[0]);\n\tconst fieldModel = parseFields(snippet);\n\t\n\treturn editor.operation(() => {\n\t\teditor.replaceRange(fieldModel.string, range.from, range.to);\n\n\t\t// Position cursor\n\t\tconst startIx = editor.indexFromPos(range.from);\n\t\tif (fieldModel.fields.length) {\n\t\t\tconst field = fieldModel.fields[0];\n\t\t\tconst from = editor.posFromIndex(field.location + startIx);\n\t\t\tconst to = editor.posFromIndex(field.location + field.length + startIx);\n\t\t\teditor.setSelection(from, to);\n\t\t} else {\n\t\t\teditor.setCursor(editor.posFromIndex(startIx + fieldModel.string.length));\n\t\t}\n\n\t\treturn true;\n\t});\n}\n","'use strict';\n\nimport { expand, parse } from '@emmetio/expand-abbreviation';\nimport extract from './extract-abbreviation';\nimport insertSnippet from './snippet';\nimport { removeFields, isCSSPropertyValue } from './utils';\n\nconst emmetMarkerClass = 'emmet-abbreviation';\n\n/**\n * Returns parsed abbreviation from given position in `editor`, if possible.\n * @param {CodeMirror.Editor} editor\n * @param {CodeMirror.Position} pos\n * @param {Boolean} [contextAware] Use context-aware abbreviation detection\n * @returns {Abbreviation}\n */\nexport default function abbreviationFromPosition(editor, pos, contextAware) {\n\t// Try to find abbreviation marker from given position\n\tconst marker = findMarker(editor, pos);\n\tif (marker && marker.model) {\n\t\treturn marker.model;\n\t}\n\n\t// Try to extract abbreviation from given position\n\tconst extracted = extract(editor, pos, contextAware);\n\tif (extracted) {\n\t\ttry {\n\t\t\tconst abbr = new Abbreviation(extracted.abbreviation, extracted.range, extracted.config);\n\t\t\treturn abbr.valid(editor, contextAware) ? abbr : null;\n\t\t} catch (err) {\n\t\t\t// skip\n\t\t\t// console.warn(err);\n\t\t}\n\t}\n}\n\n/**\n * Returns *valid* Emmet abbreviation marker (if any) for given position of editor\n * @param  {CodeMirror.Editor} editor\n * @param  {CodeMirror.Position} [pos]\n * @return {CodeMirror.TextMarker}\n */\nexport function findMarker(editor, pos) {\n\tconst markers = editor.findMarksAt(pos);\n\tfor (let i = 0, marker; i < markers.length; i++) {\n\t\tmarker = markers[i];\n\t\tif (marker.className === emmetMarkerClass) {\n\t\t\tif (isValidMarker(editor, marker)) {\n\t\t\t\treturn marker;\n\t\t\t}\n\n\t\t\tmarker.clear();\n\t\t}\n\t}\n}\n\n/**\n * Removes Emmet abbreviation markers from given editor\n * @param {CodeMirror.Editor} editor\n */\nexport function clearMarkers(editor) {\n\tconst markers = editor.getAllMarks();\n\tfor (let i = 0; i < markers.length; i++) {\n\t\tif (markers[i].className === emmetMarkerClass) {\n\t\t\tmarkers[i].clear();\n\t\t}\n\t}\n}\n\n/**\n * Marks Emmet abbreviation for given editor position, if possible\n * @param  {CodeMirror.Editor} editor Editor where abbreviation marker should be created\n * @param  {Abbreviation} model Parsed abbreviation model\n * @return {CodeMirror.TextMarker} Returns `undefined` if no valid abbreviation under caret\n */\nexport function createMarker(editor, model) {\n\tconst { from, to } = model.range;\n\tconst marker = editor.markText(from, to, {\n\t\tinclusiveLeft: true,\n\t\tinclusiveRight: true,\n\t\tclearWhenEmpty: true,\n\t\tclassName: emmetMarkerClass\n\t});\n\tmarker.model = model;\n\treturn marker;\n}\n\n/**\n * Ensures that given editor Emmet abbreviation marker contains valid Emmet abbreviation\n * and updates abbreviation model if required\n * @param {CodeMirror} editor\n * @param {CodeMirror.TextMarket} marker\n * @return {Boolean} `true` if marker contains valid abbreviation\n */\nfunction isValidMarker(editor, marker) {\n\tconst range = marker.find();\n\n\t// No newlines inside abbreviation\n\tif (range.from.line !== range.to.line) {\n\t\treturn false;\n\t}\n\n\t// Make sure marker contains valid abbreviation\n\tlet text = editor.getRange(range.from, range.to);\n\tif (!text || /^\\s|\\s$/g.test(text)) {\n\t\treturn false;\n\t}\n\n\tif (marker.model && marker.model.config.syntax === 'jsx' && text[0] === '<') {\n\t\ttext = text.slice(1);\n\t}\n\n\tif (!marker.model || marker.model.abbreviation !== text) {\n\t\t// marker contents was updated, re-parse abbreviation\n\t\ttry {\n\t\t\tmarker.model = new Abbreviation(text, range, marker.model.config);\n\t\t\tif (!marker.model.valid(editor, true)) {\n\t\t\t\tmarker.model = null;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.warn(err);\n\t\t\tmarker.model = null;\n\t\t}\n\t}\n\n\treturn Boolean(marker.model && marker.model.snippet);\n}\n\nexport class Abbreviation {\n\t/**\n\t * @param {String} abbreviation Abbreviation string\n\t * @param {CodeMirror.Range} range Abbreviation location in editor\n\t * @param {Object} [config]\n\t */\n\tconstructor(abbreviation, range, config) {\n\t\tthis.abbreviation = abbreviation;\n\t\tthis.range = range;\n\t\tthis.config = config;\n\t\tthis.ast = parse(abbreviation, config);\n\t\tthis.snippet = expand(this.ast, config);\n\t\tthis.preview = removeFields(this.snippet);\n\t}\n\n\t/**\n\t * Inserts current expanded abbreviation into given `editor` by replacing\n\t * `range`\n\t * @param {CodeMirror.Editor} editor\n\t * @param {CodeMirror.Range} [range]\n\t */\n\tinsert(editor, range) {\n\t\treturn insertSnippet(editor, range || this.range, this.snippet);\n\t}\n\n\t/**\n\t * Check if parsed abbreviation is valid\n\t * @param {Boolean} [contextAware] Perform context-aware validation: ensure \n\t * that expanded result is expected at abbreviation location\n\t */\n\tvalid(editor, contextAware) {\n\t\tif (this.preview && this.abbreviation !== this.preview) {\n\t\t\treturn contextAware && this.config.type === 'stylesheet'\n\t\t\t\t? this._isValidForStylesheet(editor)\n\t\t\t\t: true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t_isValidForStylesheet(editor) {\n\t\tconst pos = this.range.from;\n\t\tconst token = editor.getTokenAt(pos);\n\n\t\tif (/^[#!]/.test(this.abbreviation)) {\n\t\t\t// Abbreviation is a property value\n\t\t\treturn isCSSPropertyValue(editor, pos);\n\t\t}\n\n\t\t// All expanded nodes are properties? Properties has names, regular snippets don’t.\n\t\tconst isProperty = this.ast.children.every(node => node.name);\n\t\tconst state = token.state && token.state.localState || token.state;\n\n\t\tif (isProperty) {\n\t\t\t// Expanded abbreviation consists of properties: make sure we’re inside \n\t\t\t// block context\n\t\t\t// NB: in Sass, no actual block context since it’s indetation-based\n\t\t\treturn this.config.syntax === 'sass' \n\t\t\t\t|| (state && state.context && state.context.type === 'block');\n\t\t}\n\n\t\t// Expanded abbreviations are basic snippets: allow them everywhere, but forbid\n\t\t// if expanded result equals abbreviation (meaningless).\n\t\treturn true;\n\t}\n}\n","'use strict';\n\nimport getAbbreviation, { clearMarkers } from '../abbreviation';\n\n/**\n * Expand abbreviation command\n * @param {CodeMirror.Editor} editor\n * @param {Boolean} contextAware\n */\nexport default function(editor, contextAware) {\n\tif (editor.somethingSelected()) {\n\t\treturn editor.constructor.Pass;\n\t}\n\n\tconst abbr = getAbbreviation(editor, editor.getCursor(), contextAware);\n\n\tif (abbr) {\n\t\tabbr.insert(editor);\n\t\tclearMarkers(editor);\n\t\treturn true;\n\t}\n\n\t// If no abbreviation was expanded, allow editor to handle different\n\t// action for keyboard shortcut (Tab key mostly)\n\treturn editor.constructor.Pass;\n}\n","'use strict';\n\nexport default function(editor) {\n\tconst between = editor.listSelections().map(sel => betweenTags(editor, sel));\n\n\tif (!between.some(Boolean)) {\n\t\treturn editor.constructor.Pass;\n\t}\n\n\teditor.operation(() => {\n\t\tlet sels = editor.listSelections();\n\t\tconst singleSep = editor.doc.lineSeparator();\n\t\tconst doubleSep = singleSep + singleSep;\n\n\t\t// Step 1: insert newlines either single or double depending on selection\n\t\tfor (let i = sels.length - 1; i >= 0; i--) {\n\t\t\teditor.replaceRange(between[i] ? doubleSep : singleSep, sels[i].anchor, sels[i].head, '+newline');\n\t\t}\n\n\t\t// Step 2: indent inserted lines\n\t\tsels = editor.listSelections();\n\t\tfor (let i = 0; i < sels.length; i++) {\n\t\t\teditor.indentLine(sels[i].from().line, null, true);\n\n\t\t\tif (between[i]) {\n\t\t\t\teditor.indentLine(sels[i].from().line - 1, null, true);\n\t\t\t}\n\t\t}\n\n\t\t// Step 3: adjust caret positions\n\t\teditor.setSelections(editor.listSelections().map((sel, i) => {\n\t\t\tif (between[i]) {\n\t\t\t\tconst line = sel.from().line - 1;\n\t\t\t\tconst cursor = {\n\t\t\t\t\tline,\n\t\t\t\t\tch: editor.getLine(line).length\n\t\t\t\t};\n\t\t\t\treturn { anchor: cursor, head: cursor };\n\t\t\t}\n\n\t\t\treturn sel;\n\t\t}));\n\t});\n}\n\n/**\n * Check if given range is a single caret between tags\n * @param {CodeMirror} editor\n * @param {CodeMirror.range} range\n */\nfunction betweenTags(editor, range) {\n\tif (equalCursorPos(range.anchor, range.head)) {\n\t\tconst cursor = range.anchor;\n\t\tconst mode = editor.getModeAt(cursor);\n\n\t\tif (mode.name === 'xml') {\n\t\t\tconst left = editor.getTokenAt(cursor);\n\t\t\tconst right = editor.getTokenAt(Object.assign({}, cursor, { ch: cursor.ch + 1 }));\n\n\t\t\treturn left.type === 'tag bracket' && left.string === '>'\n\t\t\t\t&& right.type === 'tag bracket' && right.string === '</';\n\t\t}\n\t}\n}\n\n// Compare two positions, return 0 if they are the same, a negative\n// number when a is less, and a positive number otherwise.\nfunction cmp(a, b) {\n\treturn a.line - b.line || a.ch - b.ch;\n}\n\nfunction equalCursorPos(a, b) {\n\treturn a.sticky === b.sticky && cmp(a, b) === 0;\n}\n\n","'use strict';\n\nimport { containsPos, rangeFromNode, narrowToNonSpace, comparePos } from '../utils';\nimport createConfig from '../config';\nimport { Abbreviation } from '../abbreviation';\n\n/**\n * Marks selected text or matched node content with abbreviation\n * @param {CodeMirror} editor \n */\nexport default function wrapWithAbbreviation(editor) {\n\tconst range = getWrappingContentRange(editor);\n\n\tif (range) {\n\t\tconst prompt = editor.getOption('emmetPrompt') || defaultPrompt;\n\t\tconst text = editor.getRange(range.from, range.to, '\\n')\n\t\t\t.split('\\n')\n\t\t\t.map(line => line.trim());\n\n\t\tprompt(editor, 'Enter abbreviation to wrap with:', abbr => {\n\t\t\tif (abbr) {\n\t\t\t\tconst model = new Abbreviation(abbr, range, createConfig(editor, range.from, { text }));\n\t\t\t\tmodel.insert(editor);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconsole.warn('Nothing to wrap');\n\t}\n}\n\n/**\n * Returns content range that should be wrapped\n * @param {CodeMirror} editor \n */\nfunction getWrappingContentRange(editor) {\n\tif (editor.somethingSelected()) {\n\t\tconst sel = editor.listSelections().filter(sel => sel.anchor !== sel.head)[0];\n\t\tif (sel) {\n\t\t\treturn  comparePos(sel.anchor, sel.head) < 0\n\t\t\t\t? { from: sel.anchor, to: sel.head }\n\t\t\t\t: { from: sel.head, to: sel.anchor };\n\t\t}\n\t}\n\n\t// Nothing selected, find parent HTML node and return range for its content\n\treturn getTagRangeForPos(editor, editor.getCursor());\n}\n\n/**\n * Returns either inner or outer tag range (depending on `pos` location) \n * for given position\n * @param {CodeMirror} editor \n * @param {Object} pos \n * @return {Object}\n */\nfunction getTagRangeForPos(editor, pos) {\n\tconst model = editor.getEmmetDocumentModel();\n\tconst tag = model && model.nodeForPoint(pos);\n\n\tif (!tag) {\n\t\treturn null;\n\t}\n\n\t// Depending on given position, return either outer or inner tag range\n\tif (inRange(tag.open, pos) || inRange(tag.close, pos)) {\n\t\t// Outer range\n\t\treturn rangeFromNode(tag);\n\t}\n\n\t// Inner range\n\tconst from = tag.open.end;\n\tconst to = tag.close ? tag.close.start : tag.open.end;\n\n\treturn narrowToNonSpace(editor, from, to);\n}\n\nfunction inRange(tag, pos) {\n\treturn tag && containsPos(rangeFromNode(tag), pos);\n}\n\nfunction defaultPrompt(editor, message, callback) {\n\tcallback(window.prompt(message));\n}\n","'use strict';\n\nimport getAbbreviation, { findMarker, createMarker, clearMarkers } from './abbreviation';\n\n/**\n * Marks Emmet abbreviation for given editor position, if possible\n * @param  {CodeMirror.Editor} editor Editor where abbreviation marker should be created\n * @param  {CodeMirror.Position} pos Editor position where abbreviation marker\n * should be created. Abbreviation will be automatically extracted from given position\n * @return {CodeMirror.TextMarker} Returns `undefined` if no valid abbreviation under caret\n */\nexport default function markAbbreviation(editor, pos) {\n\tconst marker = findMarker(editor, pos);\n\tif (marker) {\n\t\t// there’s active marker with valid abbreviation\n\t\treturn marker;\n\t}\n\n\t// No active marker: remove previous markers and create new one, if possible\n\tclearMarkers(editor);\n\n\tconst model = getAbbreviation(editor, pos, true);\n\n\tif (model) {\n\t\treturn createMarker(editor, model);\n\t}\n}\n","'use strict';\n\nimport { createSnippetsRegistry, expand } from '@emmetio/expand-abbreviation';\nimport { convertToCSSSnippets } from '@emmetio/css-snippets-resolver';\nimport createConfig from './config';\nimport getAbbreviation, { clearMarkers } from './abbreviation';\nimport { removeFields } from './utils';\nimport insertSnippet from './snippet';\n\n/**\n * Returns available completions from given editor\n * @param  {CodeMirror.Editor} editor\n * @param  {Abbreviation} abbrModel Parsed Emmet abbreviation model for which\n * completions should be populated\n * @param  {CodeMirror.Position} abbrPos Abbreviation location in editor\n * @param  {CodeMirror.Position} [pos] Cursor position in editor\n * @return {EmmetCompletion[]}\n */\nexport default function(editor, pos) {\n\tpos = pos || editor.getCursor();\n\tlet completions = [];\n\n\t// Provide two types of completions:\n\t// 1. Expanded abbreviation\n\t// 2. Snippets\n\n\tconst abbreviation = getAbbreviation(editor, pos, true);\n\t// NB: Check for edge case: expanded abbreviation equals to original\n\t// abbreviation (for example, `li.item` expands to `li.item` in Slim),\n\t// no need to provide completion for this case\n\tif (abbreviation && abbreviation.abbreviation !== abbreviation.snippet) {\n\t\tcompletions.push(expandedAbbreviationCompletion(editor, pos, abbreviation));\n\t}\n\n\tconst config = abbreviation ? abbreviation.config : createConfig(editor, pos);\n\n\tif (config.type === 'stylesheet') {\n\t\tcompletions = completions.concat(getStylesheetCompletions(editor, pos, config));\n\t} else {\n\t\tcompletions = completions.concat(getMarkupCompletions(editor, pos, config));\n\t}\n\n\treturn {\n\t\ttype: config.type,\n\t\tsyntax: config.syntax,\n\t\tabbreviation,\n\t\tcompletions: completions.filter(Boolean)\n\t};\n}\n\n/**\n * Returns completions for markup syntaxes (HTML, Slim, Pug etc.)\n * @param  {CodeMirror} editor\n * @param  {CodeMirror.Position} pos Cursor position in editor\n * @param  {Object} config Resolved Emmet config\n * @return {EmmetCompletion[]}\n */\nfunction getMarkupCompletions(editor, pos, config) {\n\tconst line = editor.getLine(pos.line).slice(0, pos.ch);\n\tconst prefix = extractPrefix(line, /[\\w:\\-$@]/);\n\n\t// Make sure that current position precedes element name (e.g. not attribute,\n\t// class, id etc.)\n\tif (prefix) {\n\t\tconst prefixRange = {\n\t\t\tfrom: { line: pos.line, ch: pos.ch - prefix.length },\n\t\t\tto: pos\n\t\t};\n\n\t\treturn getSnippetCompletions(editor, pos, config)\n\t\t\t.filter(completion => completion.key !== prefix && completion.key.indexOf(prefix) === 0)\n\t\t\t.map(completion => new EmmetCompletion('snippet', editor, prefixRange, completion.key, completion.preview, completion.snippet));\n\t}\n\n\treturn [];\n}\n\n/**\n * Returns completions for stylesheet syntaxes\n * @param  {CodeMirror} editor\n * @param  {CodeMirror.Position} pos Cursor position in editor\n * @param  {Object} config Resolved Emmet config\n * @return {EmmetCompletion[]}\n */\nfunction getStylesheetCompletions(editor, pos, config) {\n\tconst line = editor.getLine(pos.line).slice(0, pos.ch);\n\tconst prefix = extractPrefix(line, /[\\w-@$]/);\n\n\tif (prefix) {\n\t\t// Make sure that current position precedes element name (e.g. not attribute,\n\t\t// class, id etc.)\n\t\tconst prefixRange = {\n\t\t\tfrom: { line: pos.line, ch: pos.ch - prefix.length },\n\t\t\tto: pos\n\t\t};\n\n\t\tif (config.options && config.options.property) {\n\t\t\tconst lowerProp = config.options.property.toLowerCase();\n\t\t\t// Find matching CSS property snippet for keyword completions\n\t\t\tconst completion = getSnippetCompletions(editor, pos, config)\n\t\t\t\t.find(item => item.property && item.property === lowerProp);\n\n\t\t\tif (completion && completion.keywords.length) {\n\t\t\t\treturn completion.keywords.map(kw => {\n\t\t\t\t\treturn kw.key.indexOf(prefix) === 0 && new EmmetCompletion('value', editor, prefixRange, kw.key, kw.preview, kw.snippet);\n\t\t\t\t}).filter(Boolean);\n\t\t\t}\n\t\t} else {\n\t\t\treturn getSnippetCompletions(editor, pos, config)\n\t\t\t\t.filter(completion => completion.key !== prefix && completion.key.indexOf(prefix) === 0)\n\t\t\t\t.map(completion => new EmmetCompletion('snippet', editor, prefixRange, completion.key, completion.preview, completion.snippet));\n\t\t}\n\t}\n\n\treturn [];\n}\n\n/**\n * Returns all possible snippets completions for given editor context.\n * Completions are cached in editor for for re-use\n * @param  {CodeMirror.Editor} editor\n * @param  {CodeMirror.Position} pos\n * @param  {Object} config\n * @return {Array}\n */\nfunction getSnippetCompletions(editor, pos, config) {\n\tconst { type, syntax } = config;\n\n\tif (!editor.state.emmetCompletions) {\n\t\teditor.state.emmetCompletions = {};\n\t}\n\n\tconst cache = editor.state.emmetCompletions;\n\n\tif (!(syntax in cache)) {\n\t\tconst registry = createSnippetsRegistry(type, syntax, config.snippets);\n\n\t\tcache[syntax] = type === 'stylesheet'\n\t\t\t? getStylesheetSnippets(registry, config)\n\t\t\t: getMarkupSnippets(registry, config);\n\t}\n\n\treturn cache[syntax];\n}\n\n/**\n * Returns stylesheet snippets list\n * @param {SnippetsRegistry} registry\n * @return {Array}\n */\nfunction getStylesheetSnippets(registry) {\n\treturn convertToCSSSnippets(registry).map(snippet => {\n\t\tlet preview = snippet.property;\n\t\tconst keywords = snippet.keywords();\n\t\tif (keywords.length) {\n\t\t\tpreview += `: ${removeFields(keywords.join(' | '))}`;\n\t\t} else if (snippet.value) {\n\t\t\tpreview += `: ${removeFields(snippet.value)}`;\n\t\t}\n\n\t\treturn {\n\t\t\tkey: snippet.key,\n\t\t\tvalue: snippet.value,\n\t\t\tsnippet: snippet.key,\n\t\t\tproperty: snippet.property,\n\t\t\tkeywords: keywords.map(kw => {\n\t\t\t\tconst m = kw.match(/^[\\w-]+/);\n\t\t\t\treturn m && {\n\t\t\t\t\tkey: m[0],\n\t\t\t\t\tpreview: removeFields(kw),\n\t\t\t\t\tsnippet: kw\n\t\t\t\t};\n\t\t\t}).filter(Boolean),\n\t\t\tpreview\n\t\t};\n\t});\n}\n\n/**\n * Returns markup snippets list\n * @param {SnippetsRegistry} registry\n * @param {Object} config\n * @return {Array}\n */\nfunction getMarkupSnippets(registry, config) {\n\treturn registry.all({ type: 'string' }).map(snippet => ({\n\t\tkey: snippet.key,\n\t\tvalue: snippet.value,\n\t\tpreview: removeFields(expand(snippet.value, config)),\n\t\tsnippet: snippet.key\n\t}));\n}\n\nfunction expandedAbbreviationCompletion(editor, pos, abbrModel) {\n\tlet preview = abbrModel.preview;\n\tif (preview.length > 500) {\n\t\tpreview = preview.slice(0, 500) + '...';\n\t}\n\n\treturn new EmmetCompletion('expanded-abbreviation', editor, abbrModel.range,\n\t\t'Expand abbreviation', preview, (editor, range) => abbrModel.insert(editor, range));\n}\n\n/**\n * Extracts prefix from the end of given string that matches `match` regexp\n * @param {String} str\n * @param {RegExp} match\n * @return {String} Extracted prefix\n */\nfunction extractPrefix(str, match) {\n\tlet offset = str.length;\n\n\twhile (offset > 0) {\n\t\tif (!match.test(str[offset - 1])) {\n\t\t\tbreak;\n\t\t}\n\t\toffset--;\n\t}\n\n\treturn str.slice(offset);\n}\n\nclass EmmetCompletion {\n\t/**\n\t * @param {String} type\n\t * @param {CodeMirror.Editor} editor\n\t * @param {CodeMirror.Range} range\n\t * @param {String} name\n\t * @param {String} preview\n\t * @param {Function} snippet\n\t */\n\tconstructor(type, editor, range, name, preview, snippet) {\n\t\tthis.type = type;\n\t\tthis.editor = editor;\n\t\tthis.range = range;\n\t\tthis.name = name;\n\t\tthis.preview = preview;\n\t\tthis.snippet = snippet;\n\n\t\tthis._inserted = false;\n\t}\n\n\tinsert() {\n\t\tif (!this._inserted) {\n\t\t\tthis._inserted = true;\n\t\t\tif (typeof this.snippet === 'function') {\n\t\t\t\tthis.snippet(this.editor, this.range);\n\t\t\t} else {\n\t\t\t\tinsertSnippet(this.editor, this.range, this.snippet);\n\t\t\t}\n\t\t\tclearMarkers(this.editor);\n\t\t}\n\t}\n}\n","'use strict';\n\nimport { containsPos, rangeFromNode } from '../utils';\n\n/**\n * A syntax-specific model container, used to get unified access to underlying\n * parsed document\n */\nexport default class SyntaxModel {\n\t/**\n\t * @param  {Object} dom      Parsed document tree\n\t * @param  {String} type     Type of document (html, stylesheet, etc.)\n\t * @param  {String} [syntax] Optional document syntax like html, xhtml or xml\n\t */\n\tconstructor(dom, type, syntax) {\n\t\tthis.dom = dom;\n\t\tthis.type = type;\n\t\tthis.syntax = syntax;\n\t}\n\n\t/**\n\t * Returns best matching node for given point\n\t * @param  {CodeMirror.Pos}   pos\n\t * @param  {Boolean} [exclude] Exclude node’s start and end positions from\n\t *                             search\n\t * @return {Node}\n\t */\n\tnodeForPoint(pos, exclude) {\n\t\tlet ctx = this.dom.firstChild;\n\t\tlet found = null;\n\n\t\twhile (ctx) {\n\t\t\tif (containsPos(rangeFromNode(ctx), pos, exclude)) {\n\t\t\t\t// Found matching tag. Try to find deeper, more accurate match\n\t\t\t\tfound = ctx;\n\t\t\t\tctx = ctx.firstChild;\n\t\t\t} else {\n\t\t\t\tctx = ctx.nextSibling;\n\t\t\t}\n\t\t}\n\n\t\treturn found;\n\t}\n}\n","'use strict';\n\nimport parseHTML from '@emmetio/html-matcher';\nimport SyntaxModel from './syntax-model';\nimport StreamReader from '../stream-reader';\n\n/**\n * Creates DOM-like model for given text editor\n * @param  {CodeMirror} editor\n * @param  {String}     syntax\n * @return {Node}\n */\nexport default function create(editor, syntax) {\n\tconst stream = new StreamReader(editor);\n\tconst xml = syntax === 'xml';\n\n\ttry {\n\t\treturn new SyntaxModel(parseHTML(stream, { xml }), 'html', syntax || 'html');\n\t} catch (err) {\n\t\tconsole.warn(err);\n\t}\n}\n","'use strict';\n\nimport parseHTML from './html';\n\nexport default function getModel(editor) {\n\tconst syntax = getSyntax(editor);\n\treturn parseHTML(editor, syntax);\n}\n\nexport function getCachedModel(editor) {\n\tif (!editor.state._emmetModel) {\n\t\teditor.state._emmetModel = getModel(editor);\n\t}\n\n\treturn editor.state._emmetModel;\n}\n\nexport function resetCachedModel(editor) {\n\teditor.state._emmetModel = null;\n}\n\n/**\n * Returns parser-supported syntax of given editor (like 'html', 'css' etc.).\n * Returns `null` if editor’s syntax is unsupported\n * @param  {CodeMirror} editor\n * @return {String}\n */\nfunction getSyntax(editor) {\n\tconst mode = editor.getMode();\n\n\tif (mode.name === 'htmlmixed') {\n\t\treturn 'html';\n\t}\n\n\treturn mode.name === 'xml' ? mode.configuration : mode.name;\n}\n","'use strict';\n\nimport { containsPos } from './utils';\n\nconst openTagMark = 'emmet-open-tag';\nconst closeTagMark = 'emmet-close-tag';\n\n/**\n * Finds matching tag pair for given position in editor\n * @param  {CodeMirror.Editor} editor\n * @param  {CodeMirror.Position} pos\n * @return {Object}\n */\nexport default function matchTag(editor, pos) {\n\tpos = pos || editor.getCursor();\n\n\t// First, check if there are tag markers in editor\n\tconst marked = getMarkedTag(editor);\n\n\t// If marks found, validate them: make sure cursor is either in open\n\t// or close tag\n\tif (marked) {\n\t\tif (containsPos(marked.open.find(), pos)) {\n\t\t\t// Point is inside open tag, make sure if there’s a closing tag,\n\t\t\t// it matches open tag content\n\t\t\tif (!marked.close || text(editor, marked.open) === text(editor, marked.close)) {\n\t\t\t\treturn marked;\n\t\t\t}\n\t\t} else if (marked.close) {\n\t\t\t// There’s a close tag, make sure pointer is inside it and it matches\n\t\t\t// open tag\n\t\t\tif (containsPos(marked.close.find(), pos) && text(editor, marked.open) === text(editor, marked.close)) {\n\t\t\t\treturn marked;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Markers are not valid anymore, remove them\n\tclearTagMatch(editor);\n\n\t// Find new tag pair from parsed HTML model and mark them\n\tconst node = findTagPair(editor, pos);\n\tif (node && node.type === 'tag') {\n\t\treturn {\n\t\t\topen: createTagMark(editor, node.open.name, openTagMark),\n\t\t\tclose: node.close && createTagMark(editor, node.close.name, closeTagMark)\n\t\t};\n\t}\n}\n\nexport function getMarkedTag(editor) {\n\tlet open, close;\n\teditor.getAllMarks().forEach(mark => {\n\t\tif (mark.className === openTagMark) {\n\t\t\topen = mark;\n\t\t} else if (mark.className === closeTagMark) {\n\t\t\tclose = mark;\n\t\t}\n\t});\n\n\treturn open ? { open, close } : null;\n}\n\n/**\n * Removes all matched tag pair markers from editor\n * @param  {CodeMirror.Editor} editor\n */\nexport function clearTagMatch(editor) {\n\teditor.getAllMarks().forEach(mark => {\n\t\tif (mark.className === openTagMark || mark.className === closeTagMark) {\n\t\t\tmark.clear();\n\t\t}\n\t});\n}\n\n/**\n * Finds tag pair (open and close, if any) form parsed HTML model of given editor\n * @param  {CodeMirror.Editor} editor\n * @param  {CodeMirror.Position} pos\n * @return {Object}\n */\nexport function findTagPair(editor, pos) {\n\tconst model = editor.getEmmetDocumentModel();\n\treturn model && model.nodeForPoint(pos || editor.getCursor());\n}\n\nfunction createTagMark(editor, tag, className) {\n\treturn editor.markText(tag.start, tag.end, {\n\t\tclassName,\n\t\tinclusiveLeft: true,\n\t\tinclusiveRight: true,\n\t\tclearWhenEmpty: false\n\t});\n}\n\nfunction text(editor, mark) {\n\tconst range = mark.find();\n\treturn range ? editor.getRange(range.from, range.to) : '';\n}\n","'use strict';\n\nimport { getMarkedTag, clearTagMatch } from './match-tag';\nimport { containsPos } from './utils';\n\nexport default function renameTag(editor, obj) {\n\tconst tag = getMarkedTag(editor);\n\tconst pos = obj.from;\n\n\tif (!tag) {\n\t\treturn;\n\t}\n\n\tif (containsPos(tag.open.find(), pos) && tag.close) {\n\t\t// Update happened inside open tag, update close tag as well\n\t\tupdateTag(editor, tag.open, tag.close);\n\t} else if (tag.close && containsPos(tag.close.find(), pos)) {\n\t\t// Update happened inside close tag, update open tag as well\n\t\tupdateTag(editor, tag.close, tag.open);\n\t}\n}\n\nexport function updateTag(editor, source, dest) {\n\tconst name = text(editor, source);\n\tconst range = dest.find();\n\tconst m = name.match(/[\\w:.-]+/);\n\tconst newName = !name ? '' : (m && m[0]);\n\n\tif (newName != null) {\n\t\tif (editor.getRange(range.from, range.to) !== newName) {\n\t\t\teditor.replaceRange(newName, range.from, range.to);\n\t\t}\n\t} else {\n\t\t// User entered something that wasn’t a valid tag name.\n\t\tclearTagMatch(editor);\n\t}\n}\n\nfunction text(editor, mark) {\n\tconst range = mark.find();\n\treturn range ? editor.getRange(range.from, range.to) : '';\n}\n","'use strict';\n\nimport expandAbbreviation from './lib/commands/expand-abbreviation';\nimport emmetInsertLineBreak from './lib/commands/formatted-line-break';\nimport emmetWrapWithAbbreviation from './lib/commands/wrap-with-abbreviation';\nimport markAbbreviation from './lib/abbreviation-marker';\nimport getAbbreviation, { findMarker, clearMarkers, createMarker } from './lib/abbreviation';\nimport autocompleteProvider from './lib/autocomplete';\nimport getModel, { getCachedModel, resetCachedModel } from './lib/model/index';\nimport matchTag, { clearTagMatch } from './lib/match-tag';\nimport renameTag from './lib/rename-tag';\n\n/**\n * Registers Emmet extension on given CodeMirror constructor.\n * This file is designed to be imported somehow into the app (CommonJS, ES6,\n * Rollup/Webpack/whatever). If you simply want to add a <script> into your page\n * that registers Emmet extension on global CodeMirror constructor, use\n * `browser.js` instead\n */\nexport default function registerEmmetExtension(CodeMirror) {\n\t// Register Emmet commands\n\tObject.assign(CodeMirror.commands, {\n\t\temmetExpandAbbreviation: editor => expandAbbreviation(editor, true),\n\t\temmetExpandAbbreviationAll: editor => expandAbbreviation(editor, false),\n\t\temmetInsertLineBreak,\n\t\temmetWrapWithAbbreviation\n\t});\n\tconst markOnEditorChange = editor => markAbbreviation(editor, editor.getCursor());\n\n\t// Defines options that allows abbreviation marking in text editor\n\tCodeMirror.defineOption('markEmmetAbbreviation', true, (editor, value) => {\n\t\tif (value) {\n\t\t\teditor.on('change', markOnEditorChange);\n\t\t} else {\n\t\t\teditor.off('change', markOnEditorChange);\n\t\t\tclearMarkers(editor);\n\t\t}\n\t});\n\n\tCodeMirror.defineOption('autoRenameTags', true, (editor, value) => {\n\t\tvalue ? editor.on('change', renameTag) : editor.off('change', renameTag);\n\t});\n\n\t// Enable/disable leading angle bracket for JSX abbreviations\n\tCodeMirror.defineOption('jsxBracket', true);\n\n\tCodeMirror.defineOption('markTagPairs', false, (editor, value) => {\n\t\tif (value) {\n\t\t\teditor.on('cursorActivity', matchTag);\n\t\t\teditor.on('change', resetCachedModel);\n\t\t} else {\n\t\t\teditor.off('cursorActivity', matchTag);\n\t\t\teditor.off('change', resetCachedModel);\n\t\t\tresetCachedModel(editor);\n\t\t\tclearTagMatch(editor);\n\t\t}\n\t});\n\n\t// Emmet config: https://github.com/emmetio/config\n\tCodeMirror.defineOption('emmet', {});\n\n\t/**\n\t * Returns Emmet completions for context from `pos` position.\n\t * Abbreviations are calculated for marked abbreviation at given position.\n\t * If no parsed abbreviation marker is available and `force` argument is\n\t * given, tries to mark abbreviation and populate completions list again.\n\t * @param  {CodeMirror.Position} [pos]\n\t * @param  {Boolean} [force]\n\t * @return {EmmetCompletion[]}\n\t */\n\tCodeMirror.defineExtension('getEmmetCompletions', function(pos, force) {\n\t\tconst editor = this;\n\t\tif (typeof pos === 'boolean') {\n\t\t\tforce = pos;\n\t\t\tpos = null;\n\t\t}\n\n\t\tpos = pos || editor.getCursor();\n\n\t\tconst autocomplete = autocompleteProvider(editor, pos);\n\t\tif (autocomplete && autocomplete.completions.length) {\n\t\t\tif (editor.getOption('markEmmetAbbreviation')) {\n\t\t\t\t// Ensure abbreviation marker exists\n\t\t\t\tif (!findMarker(editor, pos) && force) {\n\t\t\t\t\tclearMarkers(editor);\n\t\t\t\t\tcreateMarker(autocomplete.model);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tfrom: autocomplete.abbreviation.range.from,\n\t\t\t\tto: autocomplete.abbreviation.range.to,\n\t\t\t\tlist: autocomplete.completions\n\t\t\t};\n\t\t}\n\t});\n\n\t/**\n\t * Returns valid Emmet abbreviation and its location in editor from given\n\t * position\n\t * @param  {CodeMirror.Pos} [pos] Position from which abbreviation should be\n\t * extracted. If not given, current cursor position is used\n\t * @return {Abbreviation}\n\t */\n\tCodeMirror.defineExtension('getEmmetAbbreviation', function(pos, contextAware) {\n\t\treturn getAbbreviation(this, pos || this.getCursor(), contextAware);\n\t});\n\n\tCodeMirror.defineExtension('findEmmetMarker', function(pos) {\n\t\treturn findMarker(this, pos || this.getCursor());\n\t});\n\n\tCodeMirror.defineExtension('getEmmetDocumentModel', function() {\n\t\tconst editor = this;\n\t\treturn editor.getOption('markTagPairs')\n\t\t\t? getCachedModel(editor)\n\t\t\t: getModel(editor);\n\t});\n}\n"],"names":["comparePos","extract","getAbbreviation","StreamReader","getSyntax","parseHTML","text","emmetWrapWithAbbreviation"],"mappings":";;;;;;;;;AAIA,MAAM,WAAW,GAAG,CAAC,KAAK,EAAE,WAAW,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,WAAW,GAAG,GAAG,GAAG,WAAW,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;AAUvG,AAAe,SAAS,YAAY,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE;CAC1D,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;CAChC,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;;;CAGtC,MAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM;EACzC,EAAE,KAAK,EAAE,WAAW,EAAE;EACtB,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;EACzB,OAAO;EACP,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;;CAEf,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;CACnC,IAAI,MAAM,KAAK,KAAK,EAAE;EACrB,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,gBAAgB,EAAE,KAAK,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;EAC5E,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;EAC9D,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;EAC/B,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,gBAAgB,EAAE,IAAI,CAAC,aAAa,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;EACzF;;CAED,OAAO,MAAM,CAAC;CACd;;;;;;;;AAQD,AAAO,SAAS,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE;CACtC,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;CAClC,IAAI,QAAQ,CAAC,IAAI,KAAK,KAAK,IAAI,QAAQ,CAAC,IAAI,KAAK,YAAY,EAAE;EAC9D,OAAO,QAAQ,CAAC,IAAI,CAAC;EACrB;;CAED,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;CACnC,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;CAChD;;AC9CD,MAAM,QAAQ,GAAG,EAAE,CAAC;;;;;AAKpB,AAAe,MAAM,sBAAsB,SAAS,YAAY,CAAC;;;;;;CAMhE,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE;EAC/B,KAAK,EAAE,CAAC;EACR,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC;EACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;EACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEpD,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;EACnC,IAAI,CAAC,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,EAAE,KAAK,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;EACtF,IAAI,CAAC,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD;;;;;;CAMD,GAAG,GAAG;EACL,OAAO,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC5C;;;;;;CAMD,GAAG,GAAG;EACL,OAAO,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC5C;;;;;;;;;CASD,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE;EACf,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;EAC7D;;;;;;;CAOD,IAAI,GAAG;EACN,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;EAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;EAC1C,OAAO,EAAE,GAAG,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC;EAC/D;;;;;;;CAOD,IAAI,GAAG;EACN,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE;GAChB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;GACzB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;;GAEhE,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;IACnD,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IAChB,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;IAChB;;GAED,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE;;;IAGf,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC;;GAED,OAAO,IAAI,CAAC;GACZ;;EAED,OAAO,GAAG,CAAC;EACX;;;;;;;CAOD,MAAM,CAAC,CAAC,EAAE;EACT,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;;EAE3C,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;EAC5B,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEf,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;GAC3B,IAAI,EAAE,CAAC;GACP,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;GAC7B;;EAED,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC;KAC1B,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;KACpB,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;;EAE5B,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;EACnB;;;;;;;CAOD,OAAO,GAAG;EACT,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;EAC5C;;;;;;;;CAQD,SAAS,CAAC,IAAI,EAAE,EAAE,EAAE;EACnB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;EACtC;;;;;;;CAOD,KAAK,CAAC,OAAO,EAAE;EACd,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpF,GAAG,CAAC,eAAe,GAAG,OAAO,CAAC;EAC9B,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;EACnB,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;EACzB,OAAO,GAAG,CAAC;EACX;;;;;;;CAOD,WAAW,CAAC,IAAI,EAAE;EACjB,MAAM,MAAM,GAAG,IAAI,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;EAC/C,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAC3D;CACD;;AAED,SAAS,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE;CACzB,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;CACtC;;ACzJD;;;;;AAKA,AAAO,SAAS,cAAc,CAAC,MAAM,EAAE;CACtC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE;EACxC,OAAO,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;EACzD;;CAED,OAAO,IAAI,CAAC;CACZ;;;;;;;;;;AAUD,AAAO,SAAS,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE;CACxD,IAAI,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;CAC/B,MAAM,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;;CAEtC,IAAI,MAAM,KAAK,IAAI,EAAE;EACpB,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM;GAC5C,IAAI,IAAI,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EAC7C;;CAED,IAAI,WAAW,EAAE;EAChB,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;EAC9D;;CAED,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CACxB;AACD,AAYA;;;;;;AAMA,AAAO,SAAS,YAAY,CAAC,IAAI,EAAE;CAClC,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;CAC9D;;AAED,AAAO,SAAS,YAAY,CAAC,GAAG,EAAE,KAAK,EAAE;CACxC,IAAI,MAAM,GAAG,EAAE,CAAC;CAChB,OAAO,CAAC,GAAG,KAAK,EAAE,EAAE;EACnB,MAAM,IAAI,GAAG,CAAC;EACd;;CAED,OAAO,MAAM,CAAC;CACd;;;;;;;AAOD,AAAO,SAAS,YAAY,CAAC,GAAG,EAAE;CACjC,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;CAC/B;;;;;;;;;AASD,AAAO,SAAS,WAAW,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE;CAChD,OAAO,OAAO;IACXA,YAAU,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAIA,YAAU,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC;IAChEA,YAAU,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAIA,YAAU,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;CACtE;;AAED,AAAO,SAASA,YAAU,CAAC,CAAC,EAAE,CAAC,EAAE;CAChC,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;CACtC;;AAED,AAAO,SAAS,aAAa,CAAC,IAAI,EAAE;CACnC,OAAO;EACN,IAAI,EAAE,IAAI,CAAC,KAAK;EAChB,EAAE,EAAE,IAAI,CAAC,GAAG;EACZ,CAAC;CACF;;;;;;;;;;AAUD,AAAO,SAAS,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE;CAClD,MAAM,MAAM,GAAG,IAAI,sBAAsB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;;CAExD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;CACzB,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC;;CAElB,IAAI,EAAE,EAAE;EACP,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;EAChB,MAAM,CAAC,MAAM,EAAE,CAAC;;EAEhB,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE;GAC/C,MAAM,CAAC,MAAM,EAAE,CAAC;GAChB;;EAED,MAAM,CAAC,IAAI,EAAE,CAAC;EACd,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC;EAChB,MAAM;EACN,EAAE,GAAG,IAAI,CAAC;EACV;;CAED,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;CACpB;;;;;;;;AAQD,AAAO,SAAS,kBAAkB,CAAC,MAAM,EAAE,GAAG,EAAE;CAC/C,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;CACtB,IAAI,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC;;CAEvB,OAAO,EAAE,IAAI,CAAC,EAAE;EACf,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;EACxC,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;GAC9B,OAAO,KAAK,CAAC,MAAM,CAAC;GACpB;;EAED,IAAI,KAAK,CAAC,KAAK,KAAK,EAAE,EAAE;GACvB,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;GACjB,MAAM;GACN,MAAM;GACN;EACD;CACD;;;;;;;;AAQD,AAAO,SAAS,kBAAkB,CAAC,MAAM,EAAE,GAAG,EAAE;CAC/C,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;CACnC,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;EAChC,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;EACrC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,KAAK,CAAC;EACnE,OAAO,KAAK,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;EAC/D;;CAED,OAAO,KAAK,CAAC;CACb;;AC1KD;;;;;;;;AAQA,AAAe,SAAS,mBAAmB,CAAC,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE;CACtE,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;;CAEzC,IAAI,YAAY,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE;EACrD,OAAO,IAAI,CAAC;EACZ;;CAED,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE;EAC3D,SAAS,EAAE,IAAI;EACf,MAAM,EAAE,MAAM,CAAC,IAAI;EACnB,MAAM,EAAE,MAAM,CAAC,MAAM,KAAK,KAAK,IAAI,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,GAAG,GAAG,EAAE;EAC5E,CAAC,CAAC;;CAEH,IAAI,SAAS,EAAE;EACd,MAAM,IAAI,GAAG;GACZ,IAAI,EAAE,GAAG,CAAC,IAAI;GACd,EAAE,EAAE,SAAS,CAAC,KAAK;GACnB,CAAC;EACF,MAAM,EAAE,GAAG;GACV,IAAI,EAAE,GAAG,CAAC,IAAI;GACd,EAAE,EAAE,SAAS,CAAC,GAAG;GACjB,CAAC;;EAEF,IAAI,MAAM,CAAC,IAAI,KAAK,YAAY,IAAI,YAAY,EAAE;;;GAGjD,IAAI,kBAAkB,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;IACpC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,kBAAkB,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9F;GACD;;EAED,OAAO;GACN,YAAY,EAAE,SAAS,CAAC,YAAY;GACpC,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;GACnB,MAAM;GACN,CAAC;EACF;CACD;;;;;;;;;AASD,SAAS,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE;CACxC,MAAM,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;;CAE7C,IAAI,MAAM,CAAC,IAAI,KAAK,YAAY,EAAE;EACjC,OAAO,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,QAAQ,CAAC;EACzD;;CAED,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,EAAE;EAC7B,OAAO,SAAS,KAAK,IAAI,CAAC;EAC1B;;CAED,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,KAAK,EAAE;EACxD,OAAO,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,KAAK;OAC3C,SAAS,IAAI,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;EAC/C;;CAED,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,EAAE;EAC7B,OAAO,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,WAAW,CAAC;EACvD;;CAED,IAAI,MAAM,CAAC,MAAM,KAAK,KAAK,EAAE;;EAE5B,OAAO,IAAI,CAAC;EACZ;;CAED,OAAO,KAAK,CAAC;CACb;;ACjFD;;;;;;;;;AASA,AAAe,SAAS,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE;CAC1D,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAC7C,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;CACvC,IAAI,OAAO,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;CACzE,MAAM,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;;CAExC,OAAO,MAAM,CAAC,SAAS,CAAC,MAAM;EAC7B,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;;;EAG7D,MAAM,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;EAChD,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE;GAC7B,MAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;GACnC,MAAM,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,CAAC;GAC3D,MAAM,EAAE,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC;GACxE,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;GAC9B,MAAM;GACN,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;GAC1E;;EAED,OAAO,IAAI,CAAC;EACZ,CAAC,CAAC;CACH;;AC7BD,MAAM,gBAAgB,GAAG,oBAAoB,CAAC;;;;;;;;;AAS9C,AAAe,SAAS,wBAAwB,CAAC,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE;;CAE3E,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;CACvC,IAAI,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE;EAC3B,OAAO,MAAM,CAAC,KAAK,CAAC;EACpB;;;CAGD,MAAM,SAAS,GAAGC,mBAAO,CAAC,MAAM,EAAE,GAAG,EAAE,YAAY,CAAC,CAAC;CACrD,IAAI,SAAS,EAAE;EACd,IAAI;GACH,MAAM,IAAI,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,YAAY,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;GACzF,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;GACtD,CAAC,OAAO,GAAG,EAAE;;;GAGb;EACD;CACD;;;;;;;;AAQD,AAAO,SAAS,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE;CACvC,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;CACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAChD,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACpB,IAAI,MAAM,CAAC,SAAS,KAAK,gBAAgB,EAAE;GAC1C,IAAI,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;IAClC,OAAO,MAAM,CAAC;IACd;;GAED,MAAM,CAAC,KAAK,EAAE,CAAC;GACf;EACD;CACD;;;;;;AAMD,AAAO,SAAS,YAAY,CAAC,MAAM,EAAE;CACpC,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;CACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EACxC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,KAAK,gBAAgB,EAAE;GAC9C,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;GACnB;EACD;CACD;;;;;;;;AAQD,AAAO,SAAS,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE;CAC3C,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;CACjC,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE;EACxC,aAAa,EAAE,IAAI;EACnB,cAAc,EAAE,IAAI;EACpB,cAAc,EAAE,IAAI;EACpB,SAAS,EAAE,gBAAgB;EAC3B,CAAC,CAAC;CACH,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;CACrB,OAAO,MAAM,CAAC;CACd;;;;;;;;;AASD,SAAS,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE;CACtC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;;;CAG5B,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE;EACtC,OAAO,KAAK,CAAC;EACb;;;CAGD,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;CACjD,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;EACnC,OAAO,KAAK,CAAC;EACb;;CAED,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;EAC5E,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EACrB;;CAED,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,YAAY,KAAK,IAAI,EAAE;;EAExD,IAAI;GACH,MAAM,CAAC,KAAK,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;GAClE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;IACtC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB;GACD,CAAC,OAAO,GAAG,EAAE;GACb,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GAClB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;GACpB;EACD;;CAED,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;CACrD;;AAED,AAAO,MAAM,YAAY,CAAC;;;;;;CAMzB,WAAW,CAAC,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE;EACxC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;EACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;EACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;EACrB,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;EACvC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;EACxC,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;EAC1C;;;;;;;;CAQD,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE;EACrB,OAAO,aAAa,CAAC,MAAM,EAAE,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;EAChE;;;;;;;CAOD,KAAK,CAAC,MAAM,EAAE,YAAY,EAAE;EAC3B,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,OAAO,EAAE;GACvD,OAAO,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;MACrD,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC;MAClC,IAAI,CAAC;GACR;;EAED,OAAO,KAAK,CAAC;EACb;;CAED,qBAAqB,CAAC,MAAM,EAAE;EAC7B,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;EAC5B,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;;EAErC,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;;GAEpC,OAAO,kBAAkB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;GACvC;;;EAGD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;EAC9D,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,KAAK,CAAC;;EAEnE,IAAI,UAAU,EAAE;;;;GAIf,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,MAAM;QAC/B,KAAK,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;GAC/D;;;;EAID,OAAO,IAAI,CAAC;EACZ;CACD;;AC7LD;;;;;AAKA,AAAe,2BAAQ,CAAC,MAAM,EAAE,YAAY,EAAE;CAC7C,IAAI,MAAM,CAAC,iBAAiB,EAAE,EAAE;EAC/B,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;EAC/B;;CAED,MAAM,IAAI,GAAGC,wBAAe,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,EAAE,YAAY,CAAC,CAAC;;CAEvE,IAAI,IAAI,EAAE;EACT,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;EACpB,YAAY,CAAC,MAAM,CAAC,CAAC;EACrB,OAAO,IAAI,CAAC;EACZ;;;;CAID,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;CAC/B;;ACvBc,6BAAQ,CAAC,MAAM,EAAE;CAC/B,MAAM,OAAO,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;;CAE7E,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;EAC3B,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;EAC/B;;CAED,MAAM,CAAC,SAAS,CAAC,MAAM;EACtB,IAAI,IAAI,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;EACnC,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;EAC7C,MAAM,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC;;;EAGxC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;GAC1C,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,SAAS,GAAG,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;GAClG;;;EAGD,IAAI,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;EAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;GACrC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;;GAEnD,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;IACf,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACvD;GACD;;;EAGD,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK;GAC5D,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;IACf,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;IACjC,MAAM,MAAM,GAAG;KACd,IAAI;KACJ,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM;KAC/B,CAAC;IACF,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACxC;;GAED,OAAO,GAAG,CAAC;GACX,CAAC,CAAC,CAAC;EACJ,CAAC,CAAC;CACH;;;;;;;AAOD,SAAS,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE;CACnC,IAAI,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE;EAC7C,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;EAC5B,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;;EAEtC,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;GACxB,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;GACvC,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;;GAElF,OAAO,IAAI,CAAC,IAAI,KAAK,aAAa,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG;OACrD,KAAK,CAAC,IAAI,KAAK,aAAa,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC;GAC1D;EACD;CACD;;;;AAID,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;CAClB,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC;CACtC;;AAED,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;CAC7B,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;CAChD;;ACnED;;;;AAIA,AAAe,SAAS,oBAAoB,CAAC,MAAM,EAAE;CACpD,MAAM,KAAK,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;;CAE9C,IAAI,KAAK,EAAE;EACV,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,aAAa,CAAC;EAChE,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC;IACtD,KAAK,CAAC,IAAI,CAAC;IACX,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;;EAE3B,MAAM,CAAC,MAAM,EAAE,kCAAkC,EAAE,IAAI,IAAI;GAC1D,IAAI,IAAI,EAAE;IACT,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACxF,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACrB;GACD,CAAC,CAAC;EACH,MAAM;EACN,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;EAChC;CACD;;;;;;AAMD,SAAS,uBAAuB,CAAC,MAAM,EAAE;CACxC,IAAI,MAAM,CAAC,iBAAiB,EAAE,EAAE;EAC/B,MAAM,GAAG,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9E,IAAI,GAAG,EAAE;GACR,QAAQF,YAAU,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;MACzC,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,CAAC,IAAI,EAAE;MAClC,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC;GACtC;EACD;;;CAGD,OAAO,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;CACrD;;;;;;;;;AASD,SAAS,iBAAiB,CAAC,MAAM,EAAE,GAAG,EAAE;CACvC,MAAM,KAAK,GAAG,MAAM,CAAC,qBAAqB,EAAE,CAAC;CAC7C,MAAM,GAAG,GAAG,KAAK,IAAI,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;;CAE7C,IAAI,CAAC,GAAG,EAAE;EACT,OAAO,IAAI,CAAC;EACZ;;;CAGD,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE;;EAEtD,OAAO,aAAa,CAAC,GAAG,CAAC,CAAC;EAC1B;;;CAGD,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;CAC1B,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;;CAEtD,OAAO,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;CAC1C;;AAED,SAAS,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE;CAC1B,OAAO,GAAG,IAAI,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;CACnD;;AAED,SAAS,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE;CACjD,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;CACjC;;AC9ED;;;;;;;AAOA,AAAe,SAAS,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE;CACrD,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;CACvC,IAAI,MAAM,EAAE;;EAEX,OAAO,MAAM,CAAC;EACd;;;CAGD,YAAY,CAAC,MAAM,CAAC,CAAC;;CAErB,MAAM,KAAK,GAAGE,wBAAe,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;;CAEjD,IAAI,KAAK,EAAE;EACV,OAAO,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;EACnC;CACD;;ACjBD;;;;;;;;;AASA,AAAe,6BAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;CACpC,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;CAChC,IAAI,WAAW,GAAG,EAAE,CAAC;;;;;;CAMrB,MAAM,YAAY,GAAGA,wBAAe,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;;;;CAIxD,IAAI,YAAY,IAAI,YAAY,CAAC,YAAY,KAAK,YAAY,CAAC,OAAO,EAAE;EACvE,WAAW,CAAC,IAAI,CAAC,8BAA8B,CAAC,MAAM,EAAE,GAAG,EAAE,YAAY,CAAC,CAAC,CAAC;EAC5E;;CAED,MAAM,MAAM,GAAG,YAAY,GAAG,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;;CAE9E,IAAI,MAAM,CAAC,IAAI,KAAK,YAAY,EAAE;EACjC,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;EAChF,MAAM;EACN,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,oBAAoB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;EAC5E;;CAED,OAAO;EACN,IAAI,EAAE,MAAM,CAAC,IAAI;EACjB,MAAM,EAAE,MAAM,CAAC,MAAM;EACrB,YAAY;EACZ,WAAW,EAAE,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC;EACxC,CAAC;CACF;;;;;;;;;AASD,SAAS,oBAAoB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE;CAClD,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;CACvD,MAAM,MAAM,GAAG,aAAa,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;;;;CAIhD,IAAI,MAAM,EAAE;EACX,MAAM,WAAW,GAAG;GACnB,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,MAAM,EAAE;GACpD,EAAE,EAAE,GAAG;GACP,CAAC;;EAEF,OAAO,qBAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC;IAC/C,MAAM,CAAC,UAAU,IAAI,UAAU,CAAC,GAAG,KAAK,MAAM,IAAI,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACvF,GAAG,CAAC,UAAU,IAAI,IAAI,eAAe,CAAC,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;EACjI;;CAED,OAAO,EAAE,CAAC;CACV;;;;;;;;;AASD,SAAS,wBAAwB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE;CACtD,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;CACvD,MAAM,MAAM,GAAG,aAAa,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;;CAE9C,IAAI,MAAM,EAAE;;;EAGX,MAAM,WAAW,GAAG;GACnB,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,MAAM,EAAE;GACpD,EAAE,EAAE,GAAG;GACP,CAAC;;EAEF,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE;GAC9C,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;;GAExD,MAAM,UAAU,GAAG,qBAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC;KAC3D,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC;;GAE7D,IAAI,UAAU,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE;IAC7C,OAAO,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,IAAI;KACpC,OAAO,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,eAAe,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC;KACzH,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACnB;GACD,MAAM;GACN,OAAO,qBAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC;KAC/C,MAAM,CAAC,UAAU,IAAI,UAAU,CAAC,GAAG,KAAK,MAAM,IAAI,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;KACvF,GAAG,CAAC,UAAU,IAAI,IAAI,eAAe,CAAC,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;GACjI;EACD;;CAED,OAAO,EAAE,CAAC;CACV;;;;;;;;;;AAUD,SAAS,qBAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE;CACnD,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;;CAEhC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE;EACnC,MAAM,CAAC,KAAK,CAAC,gBAAgB,GAAG,EAAE,CAAC;EACnC;;CAED,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC;;CAE5C,IAAI,EAAE,MAAM,IAAI,KAAK,CAAC,EAAE;EACvB,MAAM,QAAQ,GAAG,sBAAsB,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;;EAEvE,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,KAAK,YAAY;KAClC,qBAAqB,CAAC,QAAQ,EAAE,MAAM,CAAC;KACvC,iBAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;EACvC;;CAED,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC;CACrB;;;;;;;AAOD,SAAS,qBAAqB,CAAC,QAAQ,EAAE;CACxC,OAAO,oBAAoB,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,OAAO,IAAI;EACpD,IAAI,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC;EAC/B,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;EACpC,IAAI,QAAQ,CAAC,MAAM,EAAE;GACpB,OAAO,IAAI,CAAC,EAAE,EAAE,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;GACrD,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE;GACzB,OAAO,IAAI,CAAC,EAAE,EAAE,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;GAC9C;;EAED,OAAO;GACN,GAAG,EAAE,OAAO,CAAC,GAAG;GAChB,KAAK,EAAE,OAAO,CAAC,KAAK;GACpB,OAAO,EAAE,OAAO,CAAC,GAAG;GACpB,QAAQ,EAAE,OAAO,CAAC,QAAQ;GAC1B,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,IAAI;IAC5B,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC9B,OAAO,CAAC,IAAI;KACX,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;KACT,OAAO,EAAE,YAAY,CAAC,EAAE,CAAC;KACzB,OAAO,EAAE,EAAE;KACX,CAAC;IACF,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;GAClB,OAAO;GACP,CAAC;EACF,CAAC,CAAC;CACH;;;;;;;;AAQD,SAAS,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE;CAC5C,OAAO,QAAQ,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,KAAK;EACvD,GAAG,EAAE,OAAO,CAAC,GAAG;EAChB,KAAK,EAAE,OAAO,CAAC,KAAK;EACpB,OAAO,EAAE,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;EACpD,OAAO,EAAE,OAAO,CAAC,GAAG;EACpB,CAAC,CAAC,CAAC;CACJ;;AAED,SAAS,8BAA8B,CAAC,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE;CAC/D,IAAI,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;CAChC,IAAI,OAAO,CAAC,MAAM,GAAG,GAAG,EAAE;EACzB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;EACxC;;CAED,OAAO,IAAI,eAAe,CAAC,uBAAuB,EAAE,MAAM,EAAE,SAAS,CAAC,KAAK;EAC1E,qBAAqB,EAAE,OAAO,EAAE,CAAC,MAAM,EAAE,KAAK,KAAK,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;CACrF;;;;;;;;AAQD,SAAS,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE;CAClC,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;;CAExB,OAAO,MAAM,GAAG,CAAC,EAAE;EAClB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;GACjC,MAAM;GACN;EACD,MAAM,EAAE,CAAC;EACT;;CAED,OAAO,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;CACzB;;AAED,MAAM,eAAe,CAAC;;;;;;;;;CASrB,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;EACxD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;EACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;EACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;EACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;EACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;EACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;EAEvB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;EACvB;;CAED,MAAM,GAAG;EACR,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;GACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;GACtB,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,UAAU,EAAE;IACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,MAAM;IACN,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACrD;GACD,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;GAC1B;EACD;CACD;;ACzPD;;;;AAIA,AAAe,MAAM,WAAW,CAAC;;;;;;CAMhC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE;EAC9B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;EACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;EACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;EACrB;;;;;;;;;CASD,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE;EAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;EAC9B,IAAI,KAAK,GAAG,IAAI,CAAC;;EAEjB,OAAO,GAAG,EAAE;GACX,IAAI,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE;;IAElD,KAAK,GAAG,GAAG,CAAC;IACZ,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC;IACrB,MAAM;IACN,GAAG,GAAG,GAAG,CAAC,WAAW,CAAC;IACtB;GACD;;EAED,OAAO,KAAK,CAAC;EACb;CACD;;ACrCD;;;;;;AAMA,AAAe,SAAS,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE;CAC9C,MAAM,MAAM,GAAG,IAAIC,sBAAY,CAAC,MAAM,CAAC,CAAC;CACxC,MAAM,GAAG,GAAG,MAAM,KAAK,KAAK,CAAC;;CAE7B,IAAI;EACH,OAAO,IAAI,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,IAAI,MAAM,CAAC,CAAC;EAC7E,CAAC,OAAO,GAAG,EAAE;EACb,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;EAClB;CACD;;ACjBc,SAAS,QAAQ,CAAC,MAAM,EAAE;CACxC,MAAM,MAAM,GAAGC,WAAS,CAAC,MAAM,CAAC,CAAC;CACjC,OAAOC,MAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;CACjC;;AAED,AAAO,SAAS,cAAc,CAAC,MAAM,EAAE;CACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE;EAC9B,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;EAC5C;;CAED,OAAO,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC;CAChC;;AAED,AAAO,SAAS,gBAAgB,CAAC,MAAM,EAAE;CACxC,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;CAChC;;;;;;;;AAQD,SAASD,WAAS,CAAC,MAAM,EAAE;CAC1B,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;;CAE9B,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE;EAC9B,OAAO,MAAM,CAAC;EACd;;CAED,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC;CAC5D;;AC/BD,MAAM,WAAW,GAAG,gBAAgB,CAAC;AACrC,MAAM,YAAY,GAAG,iBAAiB,CAAC;;;;;;;;AAQvC,AAAe,SAAS,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;CAC7C,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;;;CAGhC,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;;;;CAIpC,IAAI,MAAM,EAAE;EACX,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE;;;GAGzC,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE;IAC9E,OAAO,MAAM,CAAC;IACd;GACD,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE;;;GAGxB,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE;IACtG,OAAO,MAAM,CAAC;IACd;GACD;EACD;;;CAGD,aAAa,CAAC,MAAM,CAAC,CAAC;;;CAGtB,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;CACtC,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;EAChC,OAAO;GACN,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC;GACxD,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,YAAY,CAAC;GACzE,CAAC;EACF;CACD;;AAED,AAAO,SAAS,YAAY,CAAC,MAAM,EAAE;CACpC,IAAI,IAAI,EAAE,KAAK,CAAC;CAChB,MAAM,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,IAAI;EACpC,IAAI,IAAI,CAAC,SAAS,KAAK,WAAW,EAAE;GACnC,IAAI,GAAG,IAAI,CAAC;GACZ,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,YAAY,EAAE;GAC3C,KAAK,GAAG,IAAI,CAAC;GACb;EACD,CAAC,CAAC;;CAEH,OAAO,IAAI,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;CACrC;;;;;;AAMD,AAAO,SAAS,aAAa,CAAC,MAAM,EAAE;CACrC,MAAM,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,IAAI;EACpC,IAAI,IAAI,CAAC,SAAS,KAAK,WAAW,IAAI,IAAI,CAAC,SAAS,KAAK,YAAY,EAAE;GACtE,IAAI,CAAC,KAAK,EAAE,CAAC;GACb;EACD,CAAC,CAAC;CACH;;;;;;;;AAQD,AAAO,SAAS,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE;CACxC,MAAM,KAAK,GAAG,MAAM,CAAC,qBAAqB,EAAE,CAAC;CAC7C,OAAO,KAAK,IAAI,KAAK,CAAC,YAAY,CAAC,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;CAC9D;;AAED,SAAS,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE;CAC9C,OAAO,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,EAAE;EAC1C,SAAS;EACT,aAAa,EAAE,IAAI;EACnB,cAAc,EAAE,IAAI;EACpB,cAAc,EAAE,KAAK;EACrB,CAAC,CAAC;CACH;;AAED,SAAS,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE;CAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;CAC1B,OAAO,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;CAC1D;;AC7Fc,SAAS,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE;CAC9C,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;CACjC,MAAM,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;;CAErB,IAAI,CAAC,GAAG,EAAE;EACT,OAAO;EACP;;CAED,IAAI,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE;;EAEnD,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;EACvC,MAAM,IAAI,GAAG,CAAC,KAAK,IAAI,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE;;EAE3D,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;EACvC;CACD;;AAED,AAAO,SAAS,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE;CAC/C,MAAM,IAAI,GAAGE,MAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;CAClC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;CAC1B,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;CACjC,MAAM,OAAO,GAAG,CAAC,IAAI,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;CAEzC,IAAI,OAAO,IAAI,IAAI,EAAE;EACpB,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,OAAO,EAAE;GACtD,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;GACnD;EACD,MAAM;;EAEN,aAAa,CAAC,MAAM,CAAC,CAAC;EACtB;CACD;;AAED,SAASA,MAAI,CAAC,MAAM,EAAE,IAAI,EAAE;CAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;CAC1B,OAAO,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;CAC1D;;AC7BD;;;;;;;AAOA,AAAe,SAAS,sBAAsB,CAAC,UAAU,EAAE;;CAE1D,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE;EAClC,uBAAuB,EAAE,MAAM,IAAI,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC;EACnE,0BAA0B,EAAE,MAAM,IAAI,kBAAkB,CAAC,MAAM,EAAE,KAAK,CAAC;EACvE,oBAAoB;6BACpBC,oBAAyB;EACzB,CAAC,CAAC;CACH,MAAM,kBAAkB,GAAG,MAAM,IAAI,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;;;CAGlF,UAAU,CAAC,YAAY,CAAC,uBAAuB,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,KAAK,KAAK;EACzE,IAAI,KAAK,EAAE;GACV,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;GACxC,MAAM;GACN,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;GACzC,YAAY,CAAC,MAAM,CAAC,CAAC;GACrB;EACD,CAAC,CAAC;;CAEH,UAAU,CAAC,YAAY,CAAC,gBAAgB,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,KAAK,KAAK;EAClE,KAAK,GAAG,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;EACzE,CAAC,CAAC;;;CAGH,UAAU,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;;CAE5C,UAAU,CAAC,YAAY,CAAC,cAAc,EAAE,KAAK,EAAE,CAAC,MAAM,EAAE,KAAK,KAAK;EACjE,IAAI,KAAK,EAAE;GACV,MAAM,CAAC,EAAE,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;GACtC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;GACtC,MAAM;GACN,MAAM,CAAC,GAAG,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;GACvC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;GACvC,gBAAgB,CAAC,MAAM,CAAC,CAAC;GACzB,aAAa,CAAC,MAAM,CAAC,CAAC;GACtB;EACD,CAAC,CAAC;;;CAGH,UAAU,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;;;;;;;;;;CAWrC,UAAU,CAAC,eAAe,CAAC,qBAAqB,EAAE,SAAS,GAAG,EAAE,KAAK,EAAE;EACtE,MAAM,MAAM,GAAG,IAAI,CAAC;EACpB,IAAI,OAAO,GAAG,KAAK,SAAS,EAAE;GAC7B,KAAK,GAAG,GAAG,CAAC;GACZ,GAAG,GAAG,IAAI,CAAC;GACX;;EAED,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;;EAEhC,MAAM,YAAY,GAAG,oBAAoB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACvD,IAAI,YAAY,IAAI,YAAY,CAAC,WAAW,CAAC,MAAM,EAAE;GACpD,IAAI,MAAM,CAAC,SAAS,CAAC,uBAAuB,CAAC,EAAE;;IAE9C,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,KAAK,EAAE;KACtC,YAAY,CAAC,MAAM,CAAC,CAAC;KACrB,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KACjC;IACD;;GAED,OAAO;IACN,IAAI,EAAE,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI;IAC1C,EAAE,EAAE,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;IACtC,IAAI,EAAE,YAAY,CAAC,WAAW;IAC9B,CAAC;GACF;EACD,CAAC,CAAC;;;;;;;;;CASH,UAAU,CAAC,eAAe,CAAC,sBAAsB,EAAE,SAAS,GAAG,EAAE,YAAY,EAAE;EAC9E,OAAOL,wBAAe,CAAC,IAAI,EAAE,GAAG,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE,YAAY,CAAC,CAAC;EACpE,CAAC,CAAC;;CAEH,UAAU,CAAC,eAAe,CAAC,iBAAiB,EAAE,SAAS,GAAG,EAAE;EAC3D,OAAO,UAAU,CAAC,IAAI,EAAE,GAAG,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;EACjD,CAAC,CAAC;;CAEH,UAAU,CAAC,eAAe,CAAC,uBAAuB,EAAE,WAAW;EAC9D,MAAM,MAAM,GAAG,IAAI,CAAC;EACpB,OAAO,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC;KACpC,cAAc,CAAC,MAAM,CAAC;KACtB,QAAQ,CAAC,MAAM,CAAC,CAAC;EACpB,CAAC,CAAC;CACH;;;;"}